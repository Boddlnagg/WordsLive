<!--
- WordsLive - worship projection software
- Copyright (c) 2013 Patrick Reisert
- 
- This program is free software: you can redistribute it and/or modify
- it under the terms of the GNU General Public License as published by
- the Free Software Foundation, either version 3 of the License, or
- (at your option) any later version.
- 
- This program is distributed in the hope that it will be useful,
- but WITHOUT ANY WARRANTY; without even the implied warranty of
- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- GNU General Public License for more details.
- 
- You should have received a copy of the GNU General Public License
- along with this program. If not, see <http://www.gnu.org/licenses/>.
-->

<UserControl x:Class="WordsLive.Images.ImagesControlPanel"
			 xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
			 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
			 xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
			 xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
			 xmlns:imageloader="clr-namespace:WordsLive.Utils.ImageLoader"
			 xmlns:resx="clr-namespace:WordsLive.Resources"
			 xmlns:images="clr-namespace:WordsLive.Images"
			 xmlns:local="clr-namespace:WordsLive"
			 xmlns:utils="clr-namespace:WordsLive.Utils"
			 mc:Ignorable="d" 
			 d:DesignHeight="300" d:DesignWidth="500"
			 Loaded="Control_Loaded">
	<DockPanel>
		<ToolBar DockPanel.Dock="Top" ToolBarTray.IsLocked="True">
			<Button Command="Save" CommandTarget="{Binding ElementName=slideListView}" Style="{StaticResource markDisabledButton}">
				<StackPanel Orientation="Horizontal">
					<Image Width="16" Height="16" Source="/WordsLive;component/Artwork/Save.png" />
					<Label Content="{x:Static resx:Resource.vImagesSave}"/>
				</StackPanel>
			</Button>
			<Separator/>
			<Grid><CheckBox IsChecked="{Binding AutoAdvance}" Margin="5,0,0,0" VerticalAlignment="Center" x:Name="AutoAdvanceCheckBox" Content="{x:Static resx:Resource.vImagesAutoAdvanceAfter}"/></Grid>
			<TextBox Width="30" MaxLength="3" Margin="3,0,0,0" TextAlignment="Right" IsEnabled="{Binding ElementName=AutoAdvanceCheckBox, Path=IsChecked}" Text="{Binding AutoAdvanceSeconds, UpdateSourceTrigger=PropertyChanged}"/>
			<Label VerticalAlignment="Center" IsEnabled="{Binding ElementName=AutoAdvanceCheckBox, Path=IsChecked}" Content="s"/>
			<Separator/>
			<Label VerticalAlignment="Center" Content="{x:Static resx:Resource.vImagesAfterwards}"/>
			<ComboBox Width="100" ItemsSource="{Binding Source={x:Static resx:Resource.vImagesFinishActions}, Converter={StaticResource StringSplitConverter}, ConverterParameter=';'}" SelectedIndex="{Binding FinishAction, Converter={StaticResource EnumToIndexConverter}, ConverterParameter={x:Type images:FinishAction}}">
				<ComboBox.ItemTemplate>
					<DataTemplate>
						<TextBlock Margin="2,0,0,0" TextTrimming="CharacterEllipsis" Text="{Binding}"/>
					</DataTemplate>
				</ComboBox.ItemTemplate>
			</ComboBox>
		</ToolBar>
		<ListView Grid.IsSharedSizeScope="True" x:Name="slideListView" SelectionChanged="slideListView_SelectionChanged" ItemsSource="{Binding Media.Images}" KeyboardNavigation.DirectionalNavigation="None" PreviewKeyDown="slideListView_PreviewKeyDown"
			  AllowDrop="True" DragEnter="slideListView_DragEnterOrOver" DragOver="slideListView_DragEnterOrOver" DragLeave="slideListView_DragLeave" Drop="slideListView_Drop"
			  PreviewMouseMove="slideListView_PreviewMouseMove"
			  PreviewMouseLeftButtonDown="slideListView_PreviewMouseLeftButtonDown">
			<ListView.CommandBindings>
				<CommandBinding Command="Delete" CanExecute="CanExecuteCommand" Executed="CommandExecuted"/>
				<CommandBinding Command="Save" Executed="CommandExecuted" CanExecute="CanExecuteCommand"/>
				<CommandBinding Command="{x:Static local:CustomCommands.RotateLeft}" Executed="CommandExecuted" CanExecute="CanExecuteCommand"/>
				<CommandBinding Command="{x:Static local:CustomCommands.RotateRight}" Executed="CommandExecuted" CanExecute="CanExecuteCommand"/>
			</ListView.CommandBindings>
			<ListView.Resources>
				<Style TargetType="{x:Type Border}" x:Key="borderStyle">
					<Setter Property="BorderBrush" Value="White"/>
					<Style.Triggers>
						<DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ListBoxItem}},Path=IsSelected}" Value="True">
							<Setter Property="BorderBrush" Value="{StaticResource {x:Static SystemColors.HighlightBrushKey}}"/>
						</DataTrigger>
					</Style.Triggers>
				</Style>
			</ListView.Resources>
			<ListView.Style>
				<Style TargetType="{x:Type ListView}">
					<Style.Resources>
						<SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="White"/>
						<SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}" Color="White"/>
					</Style.Resources>
				</Style>
			</ListView.Style>
			<ListView.ItemsPanel>
				<ItemsPanelTemplate>
					<WrapPanel Width="{Binding (FrameworkElement.ActualWidth), RelativeSource={RelativeSource AncestorType=ScrollContentPresenter}}"
								ItemWidth="{Binding (ListView.View).ItemWidth, RelativeSource={RelativeSource AncestorType=ListView}}"
								MinWidth="{Binding ItemWidth, RelativeSource={RelativeSource Self}}"
								ItemHeight="{Binding (ListView.View).ItemHeight, RelativeSource={RelativeSource AncestorType=ListView}}"/>
				</ItemsPanelTemplate>
			</ListView.ItemsPanel>
			<ListView.ItemTemplate>
				<DataTemplate>
					<Grid>
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="Auto" SharedSizeGroup="Column"/>
						</Grid.ColumnDefinitions>
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto" SharedSizeGroup="Row"/>
						</Grid.RowDefinitions>
						<Border BorderThickness="3" Style="{StaticResource borderStyle}">
							<Image imageloader:Loader.Source="{Binding Source}" imageloader:Loader.SourceType="{Binding SourceType}" ToolTip="{Binding Title}" Margin="2,2,2,2" Height="120">
								<Image.ContextMenu>
									<ContextMenu>
										<MenuItem Header="{x:Static resx:Resource.vImagesContextMenuRemove}" Command="Delete" CommandParameter="{Binding}" CommandTarget="{Binding ElementName=slideListView}"/>
										<MenuItem Header="{x:Static resx:Resource.vImagesRotateLeft}" Command="{x:Static local:CustomCommands.RotateLeft}" CommandParameter="{Binding}" CommandTarget="{Binding ElementName=slideListView}"/>
										<MenuItem Header="{x:Static resx:Resource.vImagesRotateRight}" Command="{x:Static local:CustomCommands.RotateRight}" CommandParameter="{Binding}" CommandTarget="{Binding ElementName=slideListView}"/>
									</ContextMenu>
								</Image.ContextMenu>
							</Image>
						</Border>
					</Grid>
				</DataTemplate>
			</ListView.ItemTemplate>
			<ListView.ItemContainerStyle>
				<Style TargetType="ListViewItem">
					<EventSetter Event="PreviewMouseRightButtonDown" Handler="ListViewItem_PreviewMouseRightButtonDown" />
				</Style>
			</ListView.ItemContainerStyle>
		</ListView>
	</DockPanel>
</UserControl>
