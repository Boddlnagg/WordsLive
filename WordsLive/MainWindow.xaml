<!--
- WordsLive - worship projection software
- Copyright (c) 2014 Patrick Reisert
- 
- This program is free software: you can redistribute it and/or modify
- it under the terms of the GNU General Public License as published by
- the Free Software Foundation, either version 3 of the License, or
- (at your option) any later version.
- 
- This program is distributed in the hope that it will be useful,
- but WITHOUT ANY WARRANTY; without even the implied warranty of
- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- GNU General Public License for more details.
- 
- You should have received a copy of the GNU General Public License
- along with this program. If not, see <http://www.gnu.org/licenses/>.
-->

<Window
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	mc:Ignorable="d"
	xmlns:alb="clr-namespace:WordsLive.Utils.ActivatableListBox"
	xmlns:local="clr-namespace:WordsLive"
	xmlns:resx="clr-namespace:WordsLive.Resources"
	x:Class="WordsLive.MainWindow"
	x:Name="Window"
	Title="{Binding Path=WindowTitle}"
	MinWidth="620" MinHeight="400"
	Closed="Window_Closed" Closing="Window_Closing"
	Height = "{Binding Source={StaticResource settings}, Path=Default.MainWindowHeight, Mode=TwoWay}"
	Width = "{Binding Source={StaticResource settings}, Path=Default.MainWindowWidth, Mode=TwoWay}"
	Top="{Binding Source={StaticResource settings}, Path=Default.MainWindowTop, Mode=TwoWay}"
	Left="{Binding Source={StaticResource settings}, Path=Default.MainWindowLeft, Mode=TwoWay}"
	WindowState="{Binding Source={StaticResource settings}, Path=Default.MainWindowState, Mode=TwoWay}"
	Icon="/WordsLive;component/Artwork/Viewer.png "
	Loaded="Window_Loaded">
	<Window.CommandBindings>
		<CommandBinding Command="Open" Executed="OnExecuteCommand"/>
		<CommandBinding Command="Save" CanExecute="OnCommandCanExecute" Executed="OnExecuteCommand"/>
		<CommandBinding Command="SaveAs" CanExecute="OnCommandCanExecute"  Executed="OnExecuteCommand"/>
		<CommandBinding Command="New" Executed="OnExecuteCommand"/>
		<CommandBinding Command="Refresh" CanExecute="OnCommandCanExecute" Executed="OnExecuteCommand"/>
		<CommandBinding Command="{x:Static local:CustomCommands.Exit}" Executed="OnExecuteCommand"/>
		<CommandBinding Command="Help" Executed="OnExecuteCommand"/>
		<CommandBinding Command="{x:Static local:CustomCommands.CheckForUpdates}" Executed="OnExecuteCommand"/>
		<CommandBinding Command="{x:Static local:CustomCommands.ShowAboutDialog}" Executed="OnExecuteCommand"/>
		<CommandBinding Command="Find" Executed="OnExecuteCommand"/>
		<CommandBinding Command="{x:Static local:CustomCommands.EditActive}" CanExecute="OnCommandCanExecute" Executed="OnExecuteCommand"/>
		<CommandBinding Command="{x:Static local:CustomCommands.SwitchWindow}" Executed="OnExecuteCommand"/>
		<CommandBinding Command="{x:Static local:CustomCommands.ShowSettings}" Executed="OnExecuteCommand"/>
		<CommandBinding Command="{x:Static local:CustomCommands.ChoosePresentationArea}" Executed="OnExecuteCommand"/>
		<CommandBinding Command="{x:Static local:CustomCommands.AddMedia}" Executed="OnExecuteCommand"/>
		<CommandBinding Command="{x:Static local:CustomCommands.HidePresentation}" Executed="OnExecuteCommand"/>
		<CommandBinding Command="{x:Static local:CustomCommands.Blackscreen}" Executed="OnExecuteCommand"/>
		<CommandBinding Command="{x:Static local:CustomCommands.ShowPresentation}" Executed="OnExecuteCommand" CanExecute="OnCommandCanExecute"/>
		<CommandBinding Command="{x:Static local:CustomCommands.ToggleBlackscreen}" Executed="OnExecuteCommand"/>
		<CommandBinding Command="{x:Static local:CustomCommands.ShowTestImage}" Executed="OnExecuteCommand"/>
		<CommandBinding Command="{x:Static local:CustomCommands.ShowNotification}" Executed="OnExecuteCommand"/>
		<CommandBinding Command="{x:Static local:CustomCommands.CreateSlideshow}" Executed="OnExecuteCommand"/>
		<CommandBinding Command="{x:Static local:CustomCommands.ChangeTranslationDisplayOptions}" Executed="OnExecuteCommand" CanExecute="OnCommandCanExecute"/>
	</Window.CommandBindings>
	<Grid x:Name="LayoutRoot">
		<Grid.RowDefinitions>
			<RowDefinition Height="Auto" />
			<RowDefinition Height="Auto" />
			<RowDefinition Height="*" />
		</Grid.RowDefinitions>
		<Menu Grid.Row="0" VerticalAlignment="Top">
			<MenuItem Header="{x:Static resx:Resource.vMenuFile}">
				<MenuItem Header="{x:Static resx:Resource.vMenuNewPortfolio}" Command="New">
					<MenuItem.Icon>
						<Image Width="24" Source="/WordsLive;component/Artwork/New.png" />
					</MenuItem.Icon>
				</MenuItem>
				<MenuItem Header="{Binding Converter={StaticResource AppendEllipsisConverter}, ConverterParameter={x:Static resx:Resource.vMenuOpenPortfolio}}" Command="Open">
					<MenuItem.Icon>
						<Image Width="24" Source="/WordsLive;component/Artwork/Open.png" />
					</MenuItem.Icon>
				</MenuItem>
				<!-- TODO: Refactor command system to use DelegateCommand or ReactiveUI -->
				<MenuItem Header="{x:Static resx:Resource.vMenuSavePortfolio}" Command="Save" CommandTarget="{Binding ElementName=Window}">
					<MenuItem.Icon>
						<Image Width="24" Source="/WordsLive;component/Artwork/Save.png" />
					</MenuItem.Icon>
				</MenuItem>
				<MenuItem Header="{Binding Converter={StaticResource AppendEllipsisConverter}, ConverterParameter={x:Static resx:Resource.vMenuSavePortfolioAs}}" Command="SaveAs"/>
				<Separator/>
				<MenuItem Header="{Binding Converter={StaticResource AppendEllipsisConverter}, ConverterParameter={x:Static resx:Resource.vMenuSettings}}" Command="{x:Static local:CustomCommands.ShowSettings}" InputGestureText="{Binding Command.GestureText, RelativeSource={RelativeSource Self}}">
					<MenuItem.Icon>
						<Image Width="24" Source="/WordsLive;component/Artwork/Settings.png" />
					</MenuItem.Icon>
				</MenuItem>
				<Separator/>
				<MenuItem Header="{x:Static resx:Resource.vMenuExit}" Command="{x:Static local:CustomCommands.Exit}"/>
			</MenuItem>
			<MenuItem Header="{x:Static resx:Resource.vMenuMedia}">
				<MenuItem Header="{Binding Converter={StaticResource AppendEllipsisConverter}, ConverterParameter={x:Static resx:Resource.vMenuAddMedia}}" Command="{x:Static local:CustomCommands.AddMedia}" InputGestureText="{Binding Command.GestureText, RelativeSource={RelativeSource Self}}">
					<MenuItem.Icon>
						<Image Width="16" Source="/WordsLive;component/Artwork/Small_Plus.png" />
					</MenuItem.Icon>
				</MenuItem>
				<MenuItem Header="{x:Static resx:Resource.vMenuShowSonglist}" Command="Find">
					<MenuItem.Icon>
						<Image Width="24" Source="/WordsLive;component/Artwork/Songlist.png" />
					</MenuItem.Icon>
				</MenuItem>
				<MenuItem Header="{x:Static resx:Resource.vMenuCreateSlideshow}" Command="{x:Static local:CustomCommands.CreateSlideshow}"/>
			</MenuItem>
			<MenuItem Header="{x:Static resx:Resource.vMenuActivePresentation}">
				<MenuItem Header="{x:Static resx:Resource.vMenuRefresh}" Command="Refresh"/>
				<MenuItem Header="{x:Static resx:Resource.vMenuChangeTranslationDisplayOptions}" Command="{x:Static local:CustomCommands.ChangeTranslationDisplayOptions}"/>
			</MenuItem>
			<MenuItem Header="{x:Static resx:Resource.vMenuProjection}">
				<MenuItem Header="{x:Static resx:Resource.vMenuHidePresentation}" Command="{x:Static local:CustomCommands.HidePresentation}" IsChecked="{Binding Source={x:Static local:Controller.PresentationManager}, Path=Status, Mode=OneWay, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static local:PresentationStatus.Hide}}"/>
				<MenuItem Header="{x:Static resx:Resource.vMenuBlackscreen}" Command="{x:Static local:CustomCommands.Blackscreen}" IsChecked="{Binding Source={x:Static local:Controller.PresentationManager}, Path=Status, Mode=OneWay, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static local:PresentationStatus.Blackscreen}}"/>
				<MenuItem Header="{x:Static resx:Resource.vMenuShowPresentation}" Command="{x:Static local:CustomCommands.ShowPresentation}" IsChecked="{Binding Source={x:Static local:Controller.PresentationManager}, Path=Status, Mode=OneWay, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static local:PresentationStatus.Show}}"/>
				<Separator/>
				<MenuItem IsCheckable="True" IsChecked="{Binding UsePortfolioBackground}" Header="{Binding Converter={StaticResource AppendEllipsisConverter}, ConverterParameter={x:Static resx:Resource.vMenuUsePortfolioBackground}}">
					<MenuItem.Icon>
						<Image Width="24" Source="/WordsLive;component/Artwork/ChooseBackground.png" />
					</MenuItem.Icon>
				</MenuItem>
				<MenuItem IsCheckable="True" IsChecked="{Binding SongPresentationShowChords}" Header="{x:Static resx:Resource.vMenuShowChords}">
					<MenuItem.Icon>
						<Image Width="24" Source="/WordsLive;component/Artwork/ShowChords.png" />
					</MenuItem.Icon>
				</MenuItem>
				<MenuItem Header="{Binding Converter={StaticResource AppendEllipsisConverter}, ConverterParameter={x:Static resx:Resource.vMenuChoosePresentationArea}}" Command="{x:Static local:CustomCommands.ChoosePresentationArea}">
					<MenuItem.Icon>
						<Image Width="24" Source="/WordsLive;component/Artwork/PresentationArea.png" />
					</MenuItem.Icon>
				</MenuItem>
				<MenuItem Header="{x:Static resx:Resource.vMenuShowTestImage}" Command="{x:Static local:CustomCommands.ShowTestImage}"/>
				<MenuItem Header="{Binding Converter={StaticResource AppendEllipsisConverter}, ConverterParameter={x:Static resx:Resource.vMenuShowNotification}}" Command="{x:Static local:CustomCommands.ShowNotification}"/>
			</MenuItem>
			<MenuItem Header="{x:Static resx:Resource.veMenuWindow}">
				<MenuItem Header="{x:Static resx:Resource.veMenuShowSonglist}" Command="Find">
					<MenuItem.Icon>
						<Image Width="24" Source="/WordsLive;component/Artwork/Songlist.png" />
					</MenuItem.Icon>
				</MenuItem>
				<MenuItem Header="{x:Static resx:Resource.vMenuShowEditorWindow}" Command="{x:Static local:CustomCommands.SwitchWindow}" InputGestureText="{Binding Command.GestureText, RelativeSource={RelativeSource Self}}">
					<MenuItem.Icon>
						<Image Width="24" Source="/WordsLive;component/Artwork/Editor.png" />
					</MenuItem.Icon>
				</MenuItem>
			</MenuItem>
			<MenuItem Header="{x:Static resx:Resource.vMenuHelp}">
				<MenuItem Header="{x:Static resx:Resource.vMenuOnlineManual}" Command="Help"/>
				<MenuItem Header="{x:Static resx:Resource.vMenuCheckForUpdates}" Command="{x:Static local:CustomCommands.CheckForUpdates}"/>
				<Separator/>
				<MenuItem Header="{x:Static resx:Resource.vMenuAbout}" Command="{x:Static local:CustomCommands.ShowAboutDialog}"/>
			</MenuItem>
		</Menu>
		<ToolBar Grid.Row="1" Margin="0" VerticalAlignment="Top" ToolBarTray.IsLocked="True">
			<Button Command="{x:Static local:CustomCommands.SwitchWindow}" ToolTip="{Binding Converter={StaticResource RemoveAccessKeyConverter}, ConverterParameter={x:Static resx:Resource.vMenuShowEditorWindow}}">
				<Image Width="32" Height="32" Source="/WordsLive;component/Artwork/Editor.png" />
			</Button>
			<Button Command="{x:Static local:CustomCommands.EditActive}" Style="{StaticResource markDisabledButton}" ToolTip="{x:Static resx:Resource.vToolbarEditActiveSong}">
				<Image Width="32" Height="32" Source="/WordsLive;component/Artwork/EditCurrent.png" />
			</Button>
			<Separator/>
			<Button Command="New" ToolTip="{Binding Converter={StaticResource RemoveAccessKeyConverter}, ConverterParameter={x:Static resx:Resource.vMenuNewPortfolio}}">
				<Image Width="32" Height="32" Source="/WordsLive;component/Artwork/New.png" />
			</Button>
			<Button Command="Open" ToolTip="{Binding Converter={StaticResource RemoveAccessKeyConverter}, ConverterParameter={x:Static resx:Resource.vMenuOpenPortfolio}}">
				<Image Width="32" Height="32" Source="/WordsLive;component/Artwork/Open.png" />
			</Button>
			<Button Command="Save" CommandTarget="{Binding ElementName=Window}" Style="{StaticResource markDisabledButton}" ToolTip="{Binding Converter={StaticResource RemoveAccessKeyConverter}, ConverterParameter={x:Static resx:Resource.vMenuSavePortfolio}}">
				<Image Width="32" Height="32" Source="/WordsLive;component/Artwork/Save.png" />
			</Button>
			<Separator/>
			<RadioButton HorizontalAlignment="Left" Margin="0" VerticalAlignment="Stretch" GroupName="PresentationStatus" ToolTip="{Binding Converter={StaticResource RemoveAccessKeyConverter}, ConverterParameter={x:Static resx:Resource.vMenuHidePresentation}}"
						 IsChecked="{Binding Source={x:Static local:Controller.PresentationManager}, Path=Status, Mode=OneWay, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static local:PresentationStatus.Hide}}"
						 Command="{x:Static local:CustomCommands.HidePresentation}">
				<Image Width="32" Height="32" HorizontalAlignment="Left" VerticalAlignment="Top" Source="/WordsLive;component/Artwork/HidePresentation.png" />
			</RadioButton>
			<RadioButton HorizontalAlignment="Left" Margin="0" VerticalAlignment="Stretch" GroupName="PresentationStatus" ToolTip="{Binding Converter={StaticResource RemoveAccessKeyConverter}, ConverterParameter={x:Static resx:Resource.vMenuBlackscreen}}"
						 IsChecked="{Binding Source={x:Static local:Controller.PresentationManager}, Path=Status, Mode=OneWay, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static local:PresentationStatus.Blackscreen}}"
						 Command="{x:Static local:CustomCommands.Blackscreen}">
				<Image Width="32" Height="32" HorizontalAlignment="Left" VerticalAlignment="Top" Source="/WordsLive;component/Artwork/Blackscreen.png"/>
			</RadioButton>
			<RadioButton HorizontalAlignment="Left" Margin="0" VerticalAlignment="Stretch" Style="{StaticResource markDisabledRadioButton}" GroupName="PresentationStatus" ToolTip="{Binding Converter={StaticResource RemoveAccessKeyConverter}, ConverterParameter={x:Static resx:Resource.vMenuShowPresentation}}"
						 IsChecked="{Binding Source={x:Static local:Controller.PresentationManager}, Path=Status, Mode=OneWay, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static local:PresentationStatus.Show}}"
						 Command="{x:Static local:CustomCommands.ShowPresentation}">
				<Image Width="32" Height="32" HorizontalAlignment="Left" VerticalAlignment="Top" Source="/WordsLive;component/Artwork/ShowPresentation.png"/>
			</RadioButton>
			<Separator/>
			<Button Command="Find" ToolTip="{Binding Converter={StaticResource RemoveAccessKeyConverter}, ConverterParameter={x:Static resx:Resource.vMenuShowSonglist}}">
				<Image Width="32" Height="32" Source="/WordsLive;component/Artwork/Songlist.png" />
			</Button>
			<CheckBox ToolTip="{Binding Converter={StaticResource RemoveAccessKeyConverter}, ConverterParameter={x:Static resx:Resource.vMenuUsePortfolioBackground}}" IsChecked="{Binding UsePortfolioBackground}">
				<Image Width="32" Height="32" Source="/WordsLive;component/Artwork/ChooseBackground.png" />
			</CheckBox>
			<CheckBox ToolTip="{Binding Converter={StaticResource RemoveAccessKeyConverter}, ConverterParameter={x:Static resx:Resource.vMenuShowChords}}" IsChecked="{Binding SongPresentationShowChords}">
				<Image Width="32" Height="32" Source="/WordsLive;component/Artwork/ShowChords.png" />
			</CheckBox>
		</ToolBar>
		<Grid Grid.Row="2" DockPanel.Dock="Top">
			<Grid.RowDefinitions>
				<RowDefinition Height="*" MinHeight="100" />
				<RowDefinition Height="5" />
				<RowDefinition Height="0.5*" MinHeight="100"/>
			</Grid.RowDefinitions>
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="*" MinWidth="100"/>
				<ColumnDefinition Width="5"/>
				<ColumnDefinition Width="2.5*" MinWidth="100"/>
			</Grid.ColumnDefinitions>
			<ListBox x:Name="OrderListBox"
					 AllowDrop="True"
					 ScrollViewer.CanContentScroll="False"
					 alb:Activator.IsActivatable="True"
					 alb:Activator.ActiveItem="{Binding ActiveItem}"
					 Margin="0,26,0,0" BorderThickness="0" 
					 ItemsSource="{Binding}"
					 PreviewMouseMove="OrderListBox_PreviewMouseMove"
					 PreviewMouseLeftButtonDown="OrderListBox_PreviewMouseLeftButtonDown"
					 Drop="OrderListBox_Drop"
					 DragEnter="OrderListBox_DragEnterOrOver"
					 DragOver="OrderListBox_DragEnterOrOver"
					 DragLeave="OrderListBox_DragLeave"
					 SelectionMode="Extended"
					 IsSynchronizedWithCurrentItem="True">
				<ListBox.CommandBindings>
					<CommandBinding Command="Delete" Executed="OrderListBox_OnExecuteCommand" CanExecute="OrderListBox_OnCanExecuteCommand"/>
					<CommandBinding Command="{x:Static local:CustomCommands.MoveUp}" Executed="OrderListBox_OnExecuteCommand" CanExecute="OrderListBox_OnCanExecuteCommand"/>
					<CommandBinding Command="{x:Static local:CustomCommands.MoveDown}" Executed="OrderListBox_OnExecuteCommand" CanExecute="OrderListBox_OnCanExecuteCommand"/>
					<CommandBinding Command="{x:Static local:CustomCommands.Activate}" Executed="OrderListBox_OnExecuteCommand" CanExecute="OrderListBox_OnCanExecuteCommand"/>
					<CommandBinding Command="Refresh" Executed="OrderListBox_OnExecuteCommand" CanExecute="OrderListBox_OnCanExecuteCommand"/>
					<CommandBinding Command="{x:Static local:CustomCommands.OpenInEditor}" Executed="OrderListBox_OnExecuteCommand" CanExecute="OrderListBox_OnCanExecuteCommand"/>
					<CommandBinding Command="{x:Static local:CustomCommands.SubmitCcliOlr}" Executed="OrderListBox_OnExecuteCommand" CanExecute="OrderListBox_OnCanExecuteCommand"/>
					<CommandBinding Command="SelectAll" Executed="OrderListBox_OnExecuteCommand" CanExecute="OrderListBox_OnCanExecuteCommand"/>
				</ListBox.CommandBindings>
				<ListBox.Resources>
					<Style x:Key="ActiveItemTextStyle" TargetType="{x:Type TextBlock}">
						<Setter Property="FontWeight">
							<Setter.Value>
								<FontWeight>Normal</FontWeight>
							</Setter.Value>
						</Setter>
						<Style.Triggers>
							<DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}, Path=(alb:Activator.IsActive), Mode=OneWay}" Value="True">
								<Setter Property="FontWeight">
									<Setter.Value>
										<FontWeight>Bold</FontWeight>
									</Setter.Value>
								</Setter>
							</DataTrigger>
							<DataTrigger Binding="{Binding IsActivatable}" Value="False">
								<Setter Property="Foreground" Value="Gray"/>
							</DataTrigger>
						</Style.Triggers>
					</Style>
				</ListBox.Resources>
				<ListBox.ItemTemplate>
					<DataTemplate>
						<StackPanel Orientation="Horizontal" AllowDrop="True" ToolTip="{Binding Path=Path}">
							<Image Source="{Binding Path=Icon}" Margin="0,2,4,2" Width="22" Height="16"/>
							<TextBlock HorizontalAlignment="Left" VerticalAlignment="Center" Text="{Binding Path=Title}" TextWrapping="Wrap" Style="{StaticResource ActiveItemTextStyle}"/>
						</StackPanel>
					</DataTemplate>
				</ListBox.ItemTemplate>
				<ListBox.ItemContainerStyle>
					<Style TargetType="ListBoxItem">
						<Setter Property="ContextMenu">
							<Setter.Value>
								<ContextMenu>
									<MenuItem Header="{x:Static resx:Resource.vOrderContextMenuShow}" Command="{x:Static local:CustomCommands.Activate}"/>
									<MenuItem Header="{x:Static resx:Resource.vOrderContextMenuRefresh}" Command="Refresh"/>
									<MenuItem Header="{x:Static resx:Resource.eCommandOpenInEditor}" Command="{x:Static local:CustomCommands.OpenInEditor}"/>
									<MenuItem Header="{x:Static resx:Resource.generalSelectAll}" Command="SelectAll"/>
									<MenuItem Header="{x:Static resx:Resource.vSubmitCcliOlr}" Command="{x:Static local:CustomCommands.SubmitCcliOlr}"/>
									<MenuItem Header="{x:Static resx:Resource.generalRemove}" Command="Delete"/>
								</ContextMenu>
							</Setter.Value>
						</Setter>
					</Style>
				</ListBox.ItemContainerStyle>
			</ListBox>
			<TextBlock x:Name="ContentHeader" Padding="5" VerticalAlignment="Top" Text="{Binding ElementName=OrderListBox,Path=(alb:Activator.ActiveItem).Title}" Margin="0" Grid.Column="2" Background="{StaticResource HeaderGradientBrush}" Height="26"/>
			<TextBlock Padding="5" Text="{x:Static resx:Resource.vPanelPreview}" Grid.Row="2" Margin="0" Background="{StaticResource HeaderGradientBrush}" Height="26" VerticalAlignment="Top"/>
			<Viewbox Margin="6,32,6,6" Grid.Row="2" x:Name="PreviewBox"/>
			<GridSplitter HorizontalAlignment="Stretch" Grid.Row="1" VerticalAlignment="Stretch" Height="5" Background="#FFF0F0F0" BorderBrush="#FFE3E3E3" BorderThickness="0,1" Grid.ColumnSpan="2" Focusable="False"/>
			<GridSplitter Grid.Column="1" BorderBrush="#FFE3E3E3" Background="#FFF0F0F0" BorderThickness="1,0" Grid.RowSpan="3" HorizontalAlignment="Stretch" Margin="0" Focusable="False"/>
			<DockPanel x:Name="OrderListHeader" LastChildFill="False" Margin="0" VerticalAlignment="Top" Background="{DynamicResource HeaderGradientBrush}" Height="26">
				<!--<DockPanel.Resources>
					<Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Static ToolBar.ButtonStyleKey}}">
						<Style.Triggers>
							<DataTrigger Binding="{Binding ElementName=OrderListBox,Path=SelectedItem}" Value="{x:Null}">
								<Setter Property="Opacity" Value="0.5" />
								<Setter Property="IsEnabled" Value="False" />
							</DataTrigger>
						</Style.Triggers>
					</Style>
				</DockPanel.Resources>-->
				<TextBlock Padding="5" Text="{x:Static resx:Resource.vPanelOrder}" />
				<Button Style="{StaticResource markDisabledToolbarButton}" CommandTarget="{Binding ElementName=OrderListBox}" Command="Delete" HorizontalAlignment="Left" VerticalAlignment="Stretch" Margin="0,2" DockPanel.Dock="Right" Focusable="False">
					<Image Width="16" Height="16" Source="/WordsLive;component/Artwork/Small_Delete.png" />
				</Button>
				<Button Style="{StaticResource markDisabledToolbarButton}" CommandTarget="{Binding ElementName=OrderListBox}" Command="{x:Static local:CustomCommands.MoveDown}" HorizontalAlignment="Left" VerticalAlignment="Stretch" Margin="0,2" DockPanel.Dock="Right" Focusable="False">
					<Image Width="16" Height="16" Source="/WordsLive;component/Artwork/Small_DownArrow.png" />
				</Button>
				<Button Style="{StaticResource markDisabledToolbarButton}" CommandTarget="{Binding ElementName=OrderListBox}" Command="{x:Static local:CustomCommands.MoveUp}" HorizontalAlignment="Left" VerticalAlignment="Stretch" DockPanel.Dock="Right" Margin="0,2" Focusable="False">
					<Image Width="16" Height="16" Source="/WordsLive;component/Artwork/Small_UpArrow.png" />
				</Button>
				<Button Style="{StaticResource markDisabledToolbarButton}" Command="{x:Static local:CustomCommands.AddMedia}" HorizontalAlignment="Left" VerticalAlignment="Stretch" Margin="0,2" DockPanel.Dock="Right" Focusable="False">
					<Image Width="16" Height="16" Source="/WordsLive;component/Artwork/Small_Plus.png" />
				</Button>
			</DockPanel>
			<Grid Grid.Column="2" Grid.RowSpan="3" Margin="0,26,0,0" VerticalAlignment="Stretch">
				<Grid.RowDefinitions>
					<!--<RowDefinition Height="Auto"/>-->
					<RowDefinition Height="*"/>
					<!--<RowDefinition Height="Auto"/>-->
				</Grid.RowDefinitions>
				<!--<Label Grid.Row="0" Background="LightGray">Zurück</Label>-->
				<Border x:Name="ControlPanel" VerticalAlignment="Stretch" HorizontalAlignment="Stretch"/>
				<Image x:Name="LoadingAnimation" Source="/WordsLive;component/Artwork/LoadingAnimation.png" Stretch="None" RenderTransformOrigin="0.5,0.5">
					<Image.Style>
						<Style TargetType="Image">
							<Style.Setters>
								<Setter Property="Visibility" Value="Collapsed"/>
							</Style.Setters>
							<Style.Triggers>
								<DataTrigger Binding="{Binding CurrentPanel.LoadState}" Value="Loading">
									<Setter Property="Visibility" Value="Visible"/>
								</DataTrigger>
							</Style.Triggers>
						</Style>
					</Image.Style>
					<Image.RenderTransform>
						<RotateTransform Angle="0" />
					</Image.RenderTransform>
					<Image.Triggers>
						<EventTrigger RoutedEvent="Image.Loaded">
							<BeginStoryboard>
								<Storyboard>
									<DoubleAnimation
										Storyboard.TargetName="LoadingAnimation" 
										Storyboard.TargetProperty="(RenderTransform).(RotateTransform.Angle)"
										From="0" To="359" Duration="0:0:1" 
										AutoReverse="False" RepeatBehavior="Forever" />
								</Storyboard>
							</BeginStoryboard>
						</EventTrigger>
					</Image.Triggers>
				</Image>
				<Image x:Name="LoadingFailedImage" Source="/WordsLive;component/Artwork/LoadingFailed.png" Stretch="None">
					<Image.Style>
						<Style TargetType="Image">
							<Style.Setters>
								<Setter Property="Visibility" Value="Collapsed"/>
							</Style.Setters>
							<Style.Triggers>
								<DataTrigger Binding="{Binding CurrentPanel.LoadState}" Value="Failed">
									<Setter Property="Visibility" Value="Visible"/>
								</DataTrigger>
							</Style.Triggers>
						</Style>
					</Image.Style>
				</Image>
				<!--<Label Grid.Row="2" Content="Weiter" FontSize="13" Background="LightGray"/>-->
			</Grid>
		</Grid>
	</Grid>
</Window>