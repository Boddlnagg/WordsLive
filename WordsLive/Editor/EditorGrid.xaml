<!--
- WordsLive - worship projection software
- Copyright (c) 2014 Patrick Reisert
- 
- This program is free software: you can redistribute it and/or modify
- it under the terms of the GNU General Public License as published by
- the Free Software Foundation, either version 3 of the License, or
- (at your option) any later version.
- 
- This program is distributed in the hope that it will be useful,
- but WITHOUT ANY WARRANTY; without even the implied warranty of
- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- GNU General Public License for more details.
- 
- You should have received a copy of the GNU General Public License
- along with this program. If not, see <http://www.gnu.org/licenses/>.
-->

<Grid x:Class="WordsLive.Editor.EditorGrid"
			 xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
			 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
			 xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
			 xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
			 xmlns:local="clr-namespace:WordsLive.Editor"
			 xmlns:nodes="clr-namespace:WordsLive.Editor.Nodes"
			 xmlns:songs="clr-namespace:WordsLive.Core.Songs;assembly=WordsLive.Core"
			 xmlns:my="clr-namespace:WordsLive"
			 xmlns:resx="clr-namespace:WordsLive.Resources"
			 mc:Ignorable="d" 
			 d:DesignHeight="400" d:DesignWidth="800">
	<Grid.CommandBindings>
		<CommandBinding Command="{x:Static my:CustomCommands.Split}" CanExecute="GridCommand_CanExecute" Executed="GridCommand_Executed"/>
		<CommandBinding Command="Undo" CanExecute="GridCommand_CanExecute" Executed="GridCommand_Executed"/>
		<CommandBinding Command="Redo" CanExecute="GridCommand_CanExecute" Executed="GridCommand_Executed"/>
		<CommandBinding Command="{x:Static my:CustomCommands.ChooseBackground}" CanExecute="GridCommand_CanExecute" Executed="GridCommand_Executed"/>
	</Grid.CommandBindings>
	<Grid.Resources>
		<ContextMenu x:Key="extendedTextBoxContextMenu">
			<MenuItem Command="Cut" />
			<MenuItem Command="Copy" />
			<MenuItem Command="Paste" />
			<MenuItem Command="SelectAll" />
		</ContextMenu>
		<local:LanguageToLanguageCodeConverter x:Key="languageToLanguageCodeConverter"/>
		<local:EditControlHeaderConverter x:Key="editControlHeaderConverter"/>
		<nodes:TreeNodeProvider x:Key="treeNodeProvider"/>
		<DataTemplate x:Key="emptyEditTemplate"/>
		<DataTemplate x:Key="editCopyrightTextBoxTemplate">
			<TextBox AcceptsReturn="True" IsUndoEnabled="False"
					 Text="{Binding Path=Root.Copyright, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
					 ContextMenu="{StaticResource extendedTextBoxContextMenu}"/>
		</DataTemplate>
		<DataTemplate x:Key="editCategoryTextBoxTemplate">
			<TextBox AcceptsReturn="True" IsUndoEnabled="False"
					 Text="{Binding Path=Root.Category, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
		</DataTemplate>
		<DataTemplate x:Key="editTextWithTranslationTemplate">
			<Grid Background="White">
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="*"/>
					<ColumnDefinition Width="5"/>
					<ColumnDefinition Width="*"/>
					<ColumnDefinition Width="Auto"/>
				</Grid.ColumnDefinitions>
				<!-- The name 'TextTextBox' is used to find the cursor position (for splitting) -->
				<TextBox Name="TextTextBox" Grid.Column="0" AcceptsReturn="True" IsUndoEnabled="False"
					 Language="{Binding Path=Root.Language, Converter={StaticResource languageToLanguageCodeConverter}, ConverterCulture=en-US}"
					 Text="{Binding Path=Text, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
					 SpellCheck.IsEnabled="{Binding ElementName=EnableSpellCheckCheckBox, Path=IsChecked, Mode=OneWay}"
					 ContextMenu="{StaticResource extendedTextBoxContextMenu}"/>
				<TextBox Grid.Column="2" Name="TranslationTextBox" AcceptsReturn="True" IsUndoEnabled="False"
					 Text="{Binding Path=Translation, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
					 Language="{Binding Path=Root.TranslationLanguage, Converter={StaticResource languageToLanguageCodeConverter}, ConverterCulture=en-US}"
					 SpellCheck.IsEnabled="{Binding ElementName=EnableSpellCheckCheckBox, Path=IsChecked, Mode=OneWay}"
					 ContextMenu="{StaticResource extendedTextBoxContextMenu}"/>
				<Expander Name="TranslationExpander" Grid.Column="3" ExpandDirection="Left" IsExpanded="{Binding ElementName=StructureTree, Path=SelectedItem.Root.HasTranslation, Mode=OneTime}"
					  Expanded="TranslationExpanderExpandedCollapsed" Collapsed="TranslationExpanderExpandedCollapsed">
					<Expander.Header>
						<TextBlock Text="{x:Static resx:Resource.eGridTranslation}" Margin="5,0">
						<TextBlock.LayoutTransform>
							<RotateTransform Angle="90"/>
						</TextBlock.LayoutTransform>
						</TextBlock>
					</Expander.Header>
				</Expander>
			</Grid>
			<DataTemplate.Triggers>
				<DataTrigger Binding="{Binding ElementName=TranslationExpander, Path=IsExpanded}" Value="False">
					<Setter TargetName="TranslationTextBox" Property="Visibility" Value="Collapsed"/>
					<Setter TargetName="TextTextBox" Property="Grid.ColumnSpan" Value="3"/>
				</DataTrigger>
			</DataTemplate.Triggers>
		</DataTemplate>
		<DataTemplate x:Key="editLanguageGridTemplate">
			<Grid Margin="10">
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="Auto"></ColumnDefinition>
					<ColumnDefinition></ColumnDefinition>
				</Grid.ColumnDefinitions>
				<Grid.RowDefinitions>
					<RowDefinition Height="Auto"></RowDefinition>
					<RowDefinition Height="Auto"></RowDefinition>
				</Grid.RowDefinitions>
				<Label Grid.Row="0" Grid.Column="0" Content="{x:Static resx:Resource.eGridLanguageText}"/>
				<ComboBox Grid.Row="0" Grid.Column="1" Height="24" VerticalAlignment="Top" IsEditable="True" Text="{Binding Path=Root.Language, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
					  ItemsSource="{Binding Source={x:Static resx:Resource.eGridLanguages}, Converter={StaticResource StringSplitConverter}, ConverterParameter=';'}"/>
				<Label Grid.Row="1" Grid.Column="0" Content="{x:Static resx:Resource.eGridLanguageTranslation}"/>
				<ComboBox Grid.Row="1" Grid.Column="1" Height="24" VerticalAlignment="Top" IsEditable="True" Text="{Binding Path=Root.TranslationLanguage, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
					  ItemsSource="{Binding Source={x:Static resx:Resource.eGridLanguages}, Converter={StaticResource StringSplitConverter}, ConverterParameter=';'}" />
			</Grid>
		</DataTemplate>
		<DataTemplate x:Key="editSourceGridTemplate">
			<Grid Margin="10" VerticalAlignment="Top">
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="Auto"></ColumnDefinition>
					<ColumnDefinition></ColumnDefinition>
				</Grid.ColumnDefinitions>
				<Grid.RowDefinitions>
					<RowDefinition Height="Auto"></RowDefinition>
					<RowDefinition Height="Auto"></RowDefinition>
				</Grid.RowDefinitions>
				<Label Grid.Column="0" Grid.Row="0" Content="{x:Static resx:Resource.eGridSourceSongbookLabel}"/>
				<TextBox Grid.Column="1" Grid.Row="0" Margin="0,2,0,2" IsUndoEnabled="False" Text="{Binding Path=Root.Sources[0].Songbook, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
				<Label Grid.Column="0" Grid.Row="1" Content="{x:Static resx:Resource.eGridSourceNumberLabel}"/>
				<TextBox Grid.Column="1" Grid.Row="1" IsUndoEnabled="False" Text="{Binding Path=Root.Sources[0].Number, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
			</Grid>
		</DataTemplate>
		<local:EditControlTemplateSelector x:Key="editControlTemplateSelector"
			EmptyTemplate="{StaticResource emptyEditTemplate}"
			EditCategoryTemplate="{StaticResource editCategoryTextBoxTemplate}"
			EditCopyrightTemplate="{StaticResource editCopyrightTextBoxTemplate}"
			EditLanguageTemlate="{StaticResource editLanguageGridTemplate}"
			EditSourceTemplate="{StaticResource editSourceGridTemplate}"
			EditTextWithTranslationTemplate="{StaticResource editTextWithTranslationTemplate}"/>
	</Grid.Resources>
	<Grid.RowDefinitions>
		<RowDefinition Height="2*" MinHeight="50" />
		<RowDefinition Height="5" />
		<RowDefinition Height="*" MinHeight="50" />
	</Grid.RowDefinitions>
	<Grid.ColumnDefinitions>
		<ColumnDefinition Width="*" MinWidth="50" MaxWidth="250"/>
		<ColumnDefinition Width="5" />
		<ColumnDefinition Width="2*" MinWidth="50" />
		<ColumnDefinition Width="5" />
		<ColumnDefinition Width="*" MinWidth="50" />
	</Grid.ColumnDefinitions>
	<GridSplitter
		Grid.Column="1"
		Grid.Row="0"
		Grid.RowSpan="3"
		Background="#FFF0F0F0"
		BorderBrush="#FFE3E3E3"
		BorderThickness="1,0"
		HorizontalAlignment="Stretch"
		VerticalAlignment="Stretch" />
	<GridSplitter
		Grid.Column="3"
		Grid.Row="0"
		Grid.RowSpan="3"
		Background="#FFF0F0F0"
		BorderBrush="#FFE3E3E3"
		BorderThickness="1,0"
		HorizontalAlignment="Stretch"
		VerticalAlignment="Stretch" />
	<GridSplitter
		Grid.Row="1"
		Grid.Column="2"
		Background="#FFF0F0F0"
		BorderBrush="#FFE3E3E3"
		BorderThickness="0,1"
		HorizontalAlignment="Stretch"
		VerticalAlignment="Stretch" />
	<DockPanel
		Grid.Row="0"
		Grid.Column="0"
		LastChildFill="False"
		Margin="0"
		VerticalAlignment="Top"
		Background="{DynamicResource HeaderGradientBrush}"
		Height="26">
		<DockPanel.Resources>
			<Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Static ToolBar.ButtonStyleKey}}"/>
		</DockPanel.Resources>
		<Button ToolTip="{x:Static resx:Resource.eGridAddElementButton}" CommandTarget="{Binding ElementName=StructureTree}" Command="{x:Static my:CustomCommands.Insert}" HorizontalAlignment="Left" VerticalAlignment="Stretch" Margin="0,2" DockPanel.Dock="Right" Focusable="False">
			<Image Width="16" Height="16" Source="/WordsLive;component/Artwork/Small_Plus.png" />
		</Button>
		<TextBlock
			Padding="5"
			Text="{x:Static resx:Resource.eGridPartsHeader}" />
	</DockPanel>
	<TreeView
		x:Name="StructureTree" ItemsSource="{Binding Source={StaticResource treeNodeProvider}, Path=Root}"
		SelectedItemChanged="StructureTree_SelectedItemChanged"
		AllowDrop="True" Drop="StructureTree_Drop" DragOver="StructureTree_DragEnterOrOver" DragEnter="StructureTree_DragEnterOrOver"
		PreviewMouseLeftButtonDown="StructureTree_PreviewMouseLeftButtonDown"
		PreviewMouseMove="StructureTree_PreviewMouseMove"
		Grid.Row="0" Grid.Column="0" Margin="0,26,0,0" Grid.RowSpan="3">
		<TreeView.CommandBindings>
			<CommandBinding Command="{x:Static my:CustomCommands.Duplicate}" Executed="StructureTreeCommand_Executed"/>
			<CommandBinding Command="{x:Static my:CustomCommands.Rename}" Executed="StructureTreeCommand_Executed"/>
			<CommandBinding Command="Delete" CanExecute="StructureTreeCommand_CanExecute" Executed="StructureTreeCommand_Executed" />
			<CommandBinding Command="{x:Static my:CustomCommands.Insert}" Executed="StructureTreeCommand_Executed"/>
			<CommandBinding Command="{x:Static my:CustomCommands.AddPart}" Executed="StructureTreeCommand_Executed"/>
			<CommandBinding Command="{x:Static my:CustomCommands.SwapTextAndTranslation}" CanExecute="StructureTreeCommand_CanExecute" Executed="StructureTreeCommand_Executed"/>

		</TreeView.CommandBindings>
		<TreeView.Resources>
			<HierarchicalDataTemplate DataType="{x:Type songs:Song}" ItemsSource="{Binding Source={StaticResource treeNodeProvider}, Path=Nodes}">
				<StackPanel Orientation="Horizontal">
					<Image Width="16" Height="16" Margin="0, 1, 2, 1" Source="/WordsLive;component/Artwork/Small_Song.png" />
					<TextBlock Text="{Binding Title}" />
					<StackPanel.ContextMenu>
						<ContextMenu>
							<MenuItem Header="{x:Static resx:Resource.eGridContextRenameSong}" Command="{x:Static my:CustomCommands.Rename}" CommandParameter="{Binding}"/>
							<MenuItem Header="{x:Static resx:Resource.eGridContextAddPart}" Command="{x:Static my:CustomCommands.Insert}" CommandParameter="{Binding}"/>
						</ContextMenu>
					</StackPanel.ContextMenu>
				</StackPanel>
			</HierarchicalDataTemplate>
			<HierarchicalDataTemplate DataType="{x:Type songs:SongPart}" ItemsSource="{Binding Slides}">
				<StackPanel Orientation="Horizontal">
					<Image Width="16" Height="16" Margin="0, 1, 2, 1" Source="/WordsLive;component/Artwork/Small_Folder.png" />
					<TextBlock Text="{Binding Name}" />
					<StackPanel.ContextMenu>
						<ContextMenu>
							<MenuItem Header="{x:Static resx:Resource.eGridContextRename}" Command="{x:Static my:CustomCommands.Rename}" CommandParameter="{Binding}"/>
							<MenuItem Header="{x:Static resx:Resource.eGridContextRemovePart}" Command="Delete" CommandParameter="{Binding}"/>
							<MenuItem Header="{x:Static resx:Resource.eGridContextAddSlide}" Command="{x:Static my:CustomCommands.Insert}" CommandParameter="{Binding}"/>
							<MenuItem Header="{x:Static resx:Resource.eGridContextSwapTextAndTranslation}" Command="{x:Static my:CustomCommands.SwapTextAndTranslation}" CommandParameter="{Binding}"/>
						</ContextMenu>
					</StackPanel.ContextMenu>
				</StackPanel>
			</HierarchicalDataTemplate>
			<HierarchicalDataTemplate DataType="{x:Type songs:SongSlide}">
				<StackPanel Orientation="Horizontal">
					<Image Width="16" Height="16" Margin="0, 1, 2, 1" Source="/WordsLive;component/Artwork/Small_Slide.png" />
					<TextBlock Text="{x:Static resx:Resource.eGridSlideTitle}" />
					<StackPanel.ContextMenu>
						<ContextMenu>
							<MenuItem Header="{x:Static resx:Resource.eGridContextRemoveSlide}" Command="Delete" CommandParameter="{Binding}"/>
							<MenuItem Header="{x:Static resx:Resource.eGridContextDuplicateSlide}" Command="{x:Static my:CustomCommands.Duplicate}" CommandParameter="{Binding}"/>
							<MenuItem Header="{x:Static resx:Resource.eGridContextSwapTextAndTranslation}" Command="{x:Static my:CustomCommands.SwapTextAndTranslation}" CommandParameter="{Binding}"/>
						</ContextMenu>
					</StackPanel.ContextMenu>
				</StackPanel>
			</HierarchicalDataTemplate>
			<HierarchicalDataTemplate DataType="{x:Type nodes:SourceNode}">
				<StackPanel Orientation="Horizontal">
					<Image Width="16" Height="16" Margin="0, 1, 2, 1" Source="/WordsLive;component/Artwork/Small_Source.png" />
					<TextBlock Text="{x:Static resx:Resource.eMetadataSourceTitle}"/>
				</StackPanel>
			</HierarchicalDataTemplate>
			<HierarchicalDataTemplate DataType="{x:Type nodes:CopyrightNode}">
				<StackPanel Orientation="Horizontal">
					<Image Width="16" Height="16" Margin="0, 1, 2, 1" Source="/WordsLive;component/Artwork/Small_Copyright.png" />
					<TextBlock Text="{x:Static resx:Resource.eMetadataCopyrightTitle}"/>
				</StackPanel>
			</HierarchicalDataTemplate>
			<HierarchicalDataTemplate DataType="{x:Type nodes:LanguageNode}">
				<StackPanel Orientation="Horizontal">
					<Image Width="16" Height="16" Margin="0, 1, 2, 1" Source="/WordsLive;component/Artwork/Small_Language.png" />
					<TextBlock Text="{x:Static resx:Resource.eMetadataLanguageTitle}"/>
				</StackPanel>
			</HierarchicalDataTemplate>
			<HierarchicalDataTemplate DataType="{x:Type nodes:CategoryNode}">
				<StackPanel Orientation="Horizontal">
					<Image Width="16" Height="16" Margin="0, 1, 2, 1" Source="/WordsLive;component/Artwork/Small_Category.png" />
					<TextBlock Text="{x:Static resx:Resource.eMetadataCategoryTitle}"/>
				</StackPanel>
			</HierarchicalDataTemplate>
		</TreeView.Resources>
		<TreeView.ItemContainerStyle>
			<Style TargetType="{x:Type TreeViewItem}">
				<Setter Property="TreeViewItem.IsExpanded" Value="True"/>
				<!-- We have to select the item which is right-clicked on -->
				<EventSetter Event="TreeViewItem.PreviewMouseRightButtonDown" Handler="TreeViewItem_PreviewMouseRightButtonDown"/>
			</Style>
		</TreeView.ItemContainerStyle>
	</TreeView>
	<TextBlock
		Grid.Row="0"
		Grid.Column="2"
		Padding="5"
		Text="{x:Static resx:Resource.eGridPreviewHeader}"
		Background="{DynamicResource HeaderGradientBrush}"
		Height="26"
		VerticalAlignment="Top" />
	<local:EditorPreviewControl
				Grid.Row="0"
				Grid.Column="2"
				Margin="0,26,0,0"
				x:Name="PreviewControl"
				Song="{Binding Source={StaticResource treeNodeProvider}, Path=Song}"/>
	<DockPanel
		Grid.Row="2"
		Grid.Column="2"
		LastChildFill="False"
		Margin="0"
		VerticalAlignment="Top"
		Background="{DynamicResource HeaderGradientBrush}"
		Height="26">
		<DockPanel.Resources>
			<Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Static ToolBar.ButtonStyleKey}}"/>
		</DockPanel.Resources>
		<CheckBox x:Name="EnableSpellCheckCheckBox" DockPanel.Dock="Right" VerticalAlignment="Center" IsEnabled="False" IsChecked="{Binding Source={StaticResource settings}, Path=Default.EditorEnableSpellCheck, Mode=TwoWay}" Content="{x:Static resx:Resource.eGridSpellCheckCheckbox}"/>
		<TextBlock x:Name="EditHeader" Padding="5" Text="{Binding ElementName=StructureTree, Path=SelectedItem, Converter={StaticResource editControlHeaderConverter}}"/>
	</DockPanel>
	<Border Grid.Row="2"
		Grid.Column="2"
		Margin="0,26,0,0" Background="LightGray" x:Name="EditBorder">
		<ContentControl Content="{Binding ElementName=StructureTree, Path=SelectedItem}" ContentTemplateSelector="{StaticResource editControlTemplateSelector}"/>
	</Border>
	<DockPanel
		Grid.Row="0"
		Grid.Column="4"
		LastChildFill="False"
		Margin="0"
		VerticalAlignment="Top"
		Background="{DynamicResource HeaderGradientBrush}"
		Height="26">
		<TextBlock
		Padding="5"
		Text="{x:Static resx:Resource.eGridOrderHeader}"/>
		<Button CommandTarget="{Binding ElementName=OrderListBox}" Command="Delete" Style="{StaticResource markDisabledToolbarButton}" ToolTip="{x:Static resx:Resource.eGridOrderRemoveButton}"  HorizontalAlignment="Left" VerticalAlignment="Stretch" Margin="0,2" DockPanel.Dock="Right" Focusable="False">
			<Image Width="16" Height="16" Source="/WordsLive;component/Artwork/Small_Delete.png" />
		</Button>
		<Button CommandTarget="{Binding ElementName=OrderListBox}" Command="{x:Static my:CustomCommands.MoveDown}" Style="{StaticResource markDisabledToolbarButton}" ToolTip="{x:Static resx:Resource.eGridOrderMoveDownButton}"  HorizontalAlignment="Left" VerticalAlignment="Stretch" Margin="0,2" DockPanel.Dock="Right" Focusable="False">
			<Image Width="16" Height="16" Source="/WordsLive;component/Artwork/Small_DownArrow.png" />
		</Button>
		<Button CommandTarget="{Binding ElementName=OrderListBox}" Command="{x:Static my:CustomCommands.MoveUp}" Style="{StaticResource markDisabledToolbarButton}" ToolTip="{x:Static resx:Resource.eGridOrderMoveUpButton}"  HorizontalAlignment="Left" VerticalAlignment="Stretch" DockPanel.Dock="Right" Margin="0,2" Focusable="False">
			<Image Width="16" Height="16" Source="/WordsLive;component/Artwork/Small_UpArrow.png" />
		</Button>
		<Button CommandTarget="{Binding ElementName=OrderListBox}" Command="{x:Static my:CustomCommands.Insert}" Style="{StaticResource markDisabledToolbarButton}" ToolTip="{x:Static resx:Resource.eGridOrderAddButton}"  HorizontalAlignment="Left" VerticalAlignment="Stretch" Margin="0,2" DockPanel.Dock="Right" Focusable="False">
			<Image Width="16" Height="16" Source="/WordsLive;component/Artwork/Small_Plus.png" />
		</Button>
		<CheckBox x:Name="showSlidesCheckBox" IsChecked="{Binding Source={StaticResource settings}, Path=Default.EditorShowOrderSlidesContent, Mode=TwoWay}" VerticalAlignment="Center" DockPanel.Dock="Right" Margin="2,0">
			<TextBlock TextTrimming="CharacterEllipsis" ToolTip="{Binding Path=Text, RelativeSource={RelativeSource Self}}" Text="{x:Static resx:Resource.eGridOrderShowSlidesCheckbox}"/>
		</CheckBox>
	</DockPanel>

	<ListBox
		x:Name="OrderListBox" Grid.Column="4" Margin="0,26,0,0"
		Grid.RowSpan="3" AllowDrop="True"
		Drop="OrderListBox_Drop"
		DragOver="OrderListBox_DragEnterOrOver"
		DragEnter="OrderListBox_DragEnterOrOver"
		DragLeave="OrderListBox_DragLeave"
		ScrollViewer.CanContentScroll="False"
		PreviewMouseMove="OrderListBox_PreviewMouseMove"
		PreviewMouseLeftButtonDown="OrderListBox_PreviewMouseLeftButtonDown"
		SelectionChanged="OrderListBox_SelectionChanged"
		ItemsSource="{Binding Source={StaticResource treeNodeProvider}, Path=Song.Order}">
		<ListBox.CommandBindings>
			<CommandBinding Command="Delete" Executed="OrderListCommand_Executed" CanExecute="OrderListCommand_CanExecute"/>
			<CommandBinding Command="{x:Static my:CustomCommands.Insert}" Executed="OrderListCommand_Executed" CanExecute="OrderListCommand_CanExecute"/>
			<CommandBinding Command="{x:Static my:CustomCommands.MoveUp}" Executed="OrderListCommand_Executed" CanExecute="OrderListCommand_CanExecute"/>
			<CommandBinding Command="{x:Static my:CustomCommands.MoveDown}" Executed="OrderListCommand_Executed" CanExecute="OrderListCommand_CanExecute"/>
		</ListBox.CommandBindings>
		<ListBox.ItemTemplate>
			<DataTemplate>
				<StackPanel Orientation="Vertical">
					<TextBlock Text="{Binding Part.Name}" FontWeight="Bold" FontSize="13" Margin="2" Foreground="Gray"/>
					<ItemsControl ItemsSource="{Binding Part.Slides}">
						<ItemsControl.Style>
							<Style>
								<Style.Setters>
									<Setter Property="ItemsControl.Visibility" Value="Collapsed" />
								</Style.Setters>
								<Style.Triggers>
									<DataTrigger Binding="{Binding ElementName=showSlidesCheckBox, Path=IsChecked}" Value="True">
										<Setter Property="ItemsControl.Visibility" Value="Visible" />
									</DataTrigger>
								</Style.Triggers>
							</Style>
						</ItemsControl.Style>
						<ItemsControl.ItemTemplate>
							<DataTemplate>
								<StackPanel Orientation="Horizontal">
									<Image Source="{Binding Background, Converter={StaticResource BackgroundConverter}, ConverterParameter=60}" Height="45" Width="60" Stretch="Fill" VerticalAlignment="Top" Margin="0,5,0,0"/>
									<TextBlock Text="{Binding TextWithoutChords}" Margin="5,0,0,5"/>
								</StackPanel>
							</DataTemplate>
						</ItemsControl.ItemTemplate>
					</ItemsControl>
				</StackPanel>
			</DataTemplate>
		</ListBox.ItemTemplate>
		<ListBox.ItemContainerStyle>
			<Style TargetType="{x:Type ListBoxItem}">
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ListBoxItem}">
							<Border BorderThickness="2" x:Name="IconBorder" Margin="0" Padding="2" SnapsToDevicePixels="True" Background="White" BorderBrush="White">
								<ContentPresenter />
							</Border>
							<ControlTemplate.Triggers>
								<Trigger Property="IsSelected" Value="true">
									<Setter TargetName="IconBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
									<Setter TargetName="IconBorder" Property="Background" Value="LightBlue"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
		</ListBox.ItemContainerStyle>
	</ListBox>
</Grid>
